as.data.frame() %>%
setNames(c("x", "y")) %>%
rownames_to_column("name") %>%
as_data_frame() %>%
group_by_("name") %>%
do(data = list(c(0, 0), c(.$x, .$y))) %>%
list_parse
pal <- brewer.pal(3, 'Dark2')
library(htmlwidgets)
hchart(hplot, hcaes(x = PC1, y = PC2, group = cluster), type = 'scatter') %>%
hc_add_series_list(dfcomp) %>%
hc_colors(color = c(pal, rep('lightblue', nrow(pca$rotation)))) %>%
hc_tooltip(shared = F, formatter = JS(paste0("function() {var text = ''; if ([", paste0("'", unique(hplot$cluster), "'", collapse = ', '),"].indexOf(this.series.name) >= 0) {text = this.point.tooltip;} else {text = this.series.name;}return text;}"))) %>%
hc_title(text = 'The Three Types of Coachella 2017 Artists') %>%
hc_subtitle(text = HTML('<em>Clustering of their top tracks on Spotify</em>')) %>%
hc_xAxis(title = list(text = 'Principle Component 1')) %>%
hc_yAxis(title = list(text = 'Principle Component 2')) %>%
hc_add_theme(hc_theme_smpl()) #%>%
# saveWidget('C:/Users/Charlie/Documents/Side Projects/midnight barber/charlie86.github.io/htmlwidgets/coachellar/pca_cluster.html')
cluster_labels <- c('Hip-hop/Rock', 'EDM/Experimental', 'Alternative/Acoustic')
artist_plot_df <- artist_features %>%
mutate(cluster = paste0('Cluster #', clust, ' - ', cluster_labels[clust]),
tooltip = artist_name,
xvar = rescale(instrumentalness + danceability, to = c(0, 1)),
yvar = rescale(acousticness - energy, to = c(0, 1)))
artist_plot_df %>%
filter(artist_name %in% c('Radiohead', 'Lady Gaga', 'Kendrick Lamar')) %>%
select(artist_name, cluster)
hchart(artist_plot_df, hcaes(x = xvar, y = yvar, group = cluster), type = 'scatter') %>%
hc_tooltip(formatter = JS(paste0("function() {return this.point.tooltip;}")), useHTML = T) %>%
hc_colors(color = pal) %>%
hc_xAxis(max = 1, title = list(text = 'Instrumentalness + Danceability')) %>%
hc_yAxis(max = 1, title = list(text = 'Acousticness - Valence')) %>%
hc_add_theme(hc_theme_smpl()) %>%
hc_yAxis(plotLines = list(list(
value = .5,
color = 'black',
width = 2,
zIndex = 2))) %>%
hc_xAxis(plotLines = list(list(
value = .5,
color = 'black',
width = 2,
zIndex = 2)))
hchart(artist_plot_df, hcaes(x = xvar, y = yvar, group = cluster), type = 'scatter') %>%
hc_tooltip(formatter = JS(paste0("function() {return this.point.tooltip;}")), useHTML = T) %>%
hc_colors(color = pal) %>%
hc_xAxis(max = 1, title = list(text = 'Instrumentalness + Danceability')) %>%
hc_yAxis(max = 1, title = list(text = 'Acousticness - Valence')) %>%
hc_add_theme(hc_theme_smpl()) %>%
hc_yAxis(plotLines = list(list(
value = .5,
color = 'black',
width = 2,
zIndex = 2))) %>%
hc_xAxis(plotLines = list(list(
value = .5,
color = 'black',
width = 2,
zIndex = 2))) %>%
saveWidget('C:/Users/Charlie/Documents/Side Projects/midnight barber/charlie86.github.io/htmlwidgets/coachellar/exploratory_plot.html')
hchart(hplot, hcaes(x = PC1, y = PC2, group = cluster), type = 'scatter') %>%
hc_add_series_list(dfcomp) %>%
hc_colors(color = c(pal, rep('lightblue', nrow(pca$rotation)))) %>%
hc_tooltip(shared = F, formatter = JS(paste0("function() {var text = ''; if ([", paste0("'", unique(hplot$cluster), "'", collapse = ', '),"].indexOf(this.series.name) >= 0) {text = this.point.tooltip;} else {text = this.series.name;}return text;}"))) %>%
hc_title(text = 'Clustering Coachella') %>%
hc_subtitle(text = HTML('<em>PCA and clusters of artist tracks on Spotify</em>')) %>%
hc_xAxis(title = list(text = 'Principle Component 1')) %>%
hc_yAxis(title = list(text = 'Principle Component 2')) %>%
hc_add_theme(hc_theme_smpl()) %>%
saveWidget('C:/Users/Charlie/Documents/Side Projects/midnight barber/charlie86.github.io/htmlwidgets/coachellar/pca_cluster.html')
hchart(artist_plot_df, hcaes(x = xvar, y = yvar, group = cluster), type = 'scatter') %>%
hc_tooltip(formatter = JS(paste0("function() {return this.point.tooltip;}")), useHTML = T) %>%
hc_colors(color = pal) %>%
hc_xAxis(max = 1, title = list(text = 'Instrumentalness + Danceability')) %>%
hc_yAxis(max = 1, title = list(text = 'Acousticness - Valence')) %>%
hc_add_theme(hc_theme_smpl()) %>%
hc_yAxis(plotLines = list(list(
value = .5,
color = 'black',
width = 2,
zIndex = 2))) %>%
hc_xAxis(plotLines = list(list(
value = .5,
color = 'black',
width = 2,
zIndex = 2))) %>%
hc_title('The Three Types of Artists at Coachella 2017') %>%
hc_subtitle(text = HTML('<em>Clustering of their top tracks on Spotify</em>')) %>%
saveWidget('C:/Users/Charlie/Documents/Side Projects/midnight barber/charlie86.github.io/htmlwidgets/coachellar/exploratory_plot.html')
hchart(artist_plot_df, hcaes(x = xvar, y = yvar, group = cluster), type = 'scatter') %>%
hc_tooltip(formatter = JS(paste0("function() {return this.point.tooltip;}")), useHTML = T) %>%
hc_colors(color = pal) %>%
hc_xAxis(max = 1, title = list(text = 'Instrumentalness + Danceability')) %>%
hc_yAxis(max = 1, title = list(text = 'Acousticness - Valence')) %>%
hc_add_theme(hc_theme_smpl()) %>%
hc_yAxis(plotLines = list(list(
value = .5,
color = 'black',
width = 2,
zIndex = 2))) %>%
hc_xAxis(plotLines = list(list(
value = .5,
color = 'black',
width = 2,
zIndex = 2))) %>%
hc_title(text = 'The Three Types of Artists at Coachella 2017') %>%
hc_subtitle(text = HTML('<em>Clustering of their top tracks on Spotify</em>')) %>%
saveWidget('C:/Users/Charlie/Documents/Side Projects/midnight barber/charlie86.github.io/htmlwidgets/coachellar/exploratory_plot.html')
hchart(artist_plot_df, hcaes(x = xvar, y = yvar, group = cluster), type = 'scatter') %>%
hc_tooltip(formatter = JS(paste0("function() {return this.point.tooltip;}")), useHTML = T) %>%
hc_colors(color = pal) %>%
hc_xAxis(max = 1, title = list(text = 'Instrumentalness + Danceability')) %>%
hc_yAxis(max = 1, title = list(text = 'Acousticness - Valence')) %>%
hc_add_theme(hc_theme_smpl()) %>%
hc_yAxis(plotLines = list(list(
value = .5,
color = 'black',
width = 2,
zIndex = 2))) %>%
hc_xAxis(plotLines = list(list(
value = .5,
color = 'black',
width = 2,
zIndex = 2))) %>%
hc_title(text = 'The Three Types of Artists at Coachella 2017') %>%
hc_subtitle(text = HTML('<em>Clustering of their top tracks on Spotify</em>'))
hchart(hplot, hcaes(x = PC1, y = PC2, group = cluster), type = 'scatter') %>%
hc_add_series_list(dfcomp) %>%
hc_colors(color = c(pal, rep('lightblue', nrow(pca$rotation)))) %>%
hc_tooltip(shared = F, formatter = JS(paste0("function() {var text = ''; if ([", paste0("'", unique(hplot$cluster), "'", collapse = ', '),"].indexOf(this.series.name) >= 0) {text = this.point.tooltip;} else {text = this.series.name;}return text;}"))) %>%
hc_title(text = 'Clustering Coachella') %>%
hc_subtitle(text = HTML('<em>PCA and clusters of artist tracks on Spotify</em>')) %>%
hc_xAxis(title = list(text = 'Principle Component 1')) %>%
hc_yAxis(title = list(text = 'Principle Component 2')) %>%
hc_add_theme(hc_theme_smpl())
scatterplot3js(pca$x[, 1:3], color = pal[clust], labels = hplot$name, renderer = 'canvas')
?scatterplot3js
scatterplot3js(pca$x[, 1:3], color = pal[clust], labels = hplot$name, renderer = 'canvas')
51435*.75
51435*.75/60
51435*.75/60/24
library(vb)
vbQuery("select sum(NULL, 1,3)")
vbQuery("select sum(NA,1,3)")
vbQuery("select sum(null,1,3)")
vbQuery("select * from stockblocks_master.member_payments where payment_status = 'refund' and subscription_purchase_amount = 0 limit 5")
vbQuery("select * from stockblocks_master.member_payments where payment_status = 'success' and subscription_purchase_amount = 0 limit 5")
vbQuery("select subscription_purchase_amount, count(*) from stockblocks_master.member_payments where payment_status = 'refund' group by 1 limit 20")
vbQuery("select subscription_purchase_amount, count(*) from stockblocks_master.member_payments where payment_status = 'refund' and subscription_purchase_amount is null group by 1 limit 20")
vbQuery("select * from stockblocks_master.member_payments where payment_status = 'refund' and subscription_purchase_amount is null group by 1 limit 20")
vbQuery("select * from stockblocks_master.member_payments where payment_status = 'refund' and subscription_purchase_amount is null limit 20")
vbQuery("select * from
stockblocks_master.member_payments mp
LEFT JOIN stockblocks_master.member_payment_details mpd
ON mp.site_member_payment_id = mpd.site_member_payment_id
where mpd.is_chargeback = 0
and mp.subscription_purchase_amount = 0
and mp.marketplace_purchase_amount = 0
limit 7")
vbQuery("select * from
stockblocks_master.member_payments mp
LEFT JOIN stockblocks_master.member_payment_details mpd
ON mp.site_member_payment_id = mpd.site_member_payment_id
where mpd.is_chargeback = 1
and mp.subscription_purchase_amount = 0
and mp.marketplace_purchase_amount = 0
limit 7")
vbQuery("select * from
stockblocks_master.member_payments mp
LEFT JOIN stockblocks_master.member_payment_details mpd
ON mp.site_member_payment_id = mpd.site_member_payment_id
where mpd.is_chargeback = 1
limit 7")
vbQuery("select * from
stockblocks_master.member_payments mp
LEFT JOIN stockblocks_master.member_payment_details mpd
ON mp.site_member_payment_id = mpd.site_member_payment_id
where mpd.is_chargeback = 1
and mp.subscription_purchase_amount = 0
limit 7")
vbQuery("select * from
stockblocks_master.member_payments mp
LEFT JOIN stockblocks_master.member_payment_details mpd
ON mp.site_member_payment_id = mpd.site_member_payment_id
where mpd.is_chargeback = 1
and mp.marketplace_purchase_amount = 0
limit 7")
vbQuery("select * from
stockblocks_master.member_payments mp
LEFT JOIN stockblocks_master.member_payment_details mpd
ON mp.site_member_payment_id = mpd.site_member_payment_id
where mpd.is_chargeback = 1
and mp.subscription_purchase_amount = 0
and mp.marketplace_purchase_amount is null
limit 7")
vbQuery("select * from
stockblocks_master.member_payments mp
LEFT JOIN stockblocks_master.member_payment_details mpd
ON mp.site_member_payment_id = mpd.site_member_payment_id
where mpd.is_chargeback = 1
and coalesce(mp.subscription_purchase_amount, 0) = 0
and coalesce(mp.marketplace_purchase_amount, 0) =0
limit 7")
vbQuery("select * from stockblocks_master.member_payments where id = 1000889")
vbQuery("select * from stockblocks_master.member_payments where member_id = 619173")
vbQuery("select * from
stockblocks_master.member_payments mp
LEFT JOIN stockblocks_master.member_payment_details mpd
ON mp.site_member_payment_id = mpd.site_member_payment_id
where mpd.is_chargeback = 1
and coalesce(mp.subscription_purchase_amount, 0) > 0
limit 7")
vbQuery("select * from stockblocks_master.member_payments where id = 292326")
vbQuery("select * from
stockblocks_master.member_payments mp
LEFT JOIN stockblocks_master.member_payment_details mpd
ON mp.site_member_payment_id = mpd.site_member_payment_id
where mp.site_id = 1
and mp.member_id = 166492
and coalesce(mp.subscription_purchase_amount, 0) > 0
limit 7")
shiny::runApp('VideoBlocks/shiny-server/ab_test')
head(visitors_tbl$gs_xsell_refund_amount)
visitors_tbl$sub_chargebacks
runApp('VideoBlocks/shiny-server/ab_test')
rm(list =ls())
runApp('VideoBlocks/shiny-server/ab_test')
rm(list = ls())
runApp('VideoBlocks/shiny-server/ab_test')
runApp('VideoBlocks/shiny-server/ab_test')
make.vb_xsell_subscription_refunds(visitors_tbl)
make.gs_xsell_subscription_refunds(visitors_tbl)
make.ab_xsell_subscription_refunds(visitors_tbl)
rm(list = ls())
runApp('VideoBlocks/shiny-server/ab_test')
make.total_xsell_subscription_refunds(visitors_tbl)
make.vb_xsell_subscription_refunds(visitors_tbl)
rm(list = ls())
runApp('VideoBlocks/shiny-server/ab_test')
make.vb_xsell_subscription_refunds(visitors_tbl)
make.total_xsell_subscription_refunds(visitors_tbl)
runApp('VideoBlocks/shiny-server/ab_test')
runApp('VideoBlocks/shiny-server/ab_test')
runApp('VideoBlocks/shiny-server/ab_test')
runApp('VideoBlocks/shiny-server/ab_test')
visitors_tbl$sub_chargebacks
runApp('VideoBlocks/shiny-server/ab_test')
rm(list = ls())
runApp('VideoBlocks/shiny-server/ab_test')
libary(vb)
library(vb)
vbQuery("select count(*) from stockblocks_master.member_campaign_profiles where medium = 'freesites'")
vbQuery("select count(*) from stockblocks_master.member_campaign_profiles where campaign_medium = 'freesites'")
vbQuery("select count(*) from stockblocks_master.member_campaign_profiles where campaign_medium = 'lgs'")
vbQuery('C:/Users/Charlie/Documents/VideoBlocks/data/myred/warehouse/run_once/channel-classification/create_function_classify_channel.sql', 'prod', send = T)
vbQuery('C:/Users/Charlie/Documents/VideoBlocks/data/myred/warehouse/run_once/channel-classification/create_function_classify_channel.sql', 'prod', send = T)
vbQuery("select * from stockblocks_master.member_campaign_profiles where campaign_source = 'onsite'")
vbQuery("select * from stockblocks_master.member_campaign_profiles where campaign_source = 'onsite'", 'prod')
library(vb)
vbPeek("analytics.member_attributes_computed")
vbQuery("select count(*) from analytics.member_attributes_computed")
vbQuery("select count(*) from analytics.member_attributes_computed", 'test')
vbQuery("select count(*) from analytics.member_attributes_computed", 'prod')
vbQuery("select count(*) from stockblocks_master.members", 'test')
vbQuery("select count(*) from stockblocks_master.members", 'prod')
vbQuery("select count(*) from stockblocks_master.member_campaign_profiles", 'prod')
vbQuery("select count(*) from stockblocks_master.member_campaign_profiles", 'test')
vbQuery("select site_member_id, count(*) from analytics.member_attributes_computed group by 1  order by 2 desc limit 10 ")
vbQuery("select site_member_id, count(*) from analytics.member_attributes_computed group by 1  order by 2 desc limit 10", 'test')
vbQuery("select count(*) from analytics.member_attributes_general", 'test')
vbQuery("select count(*) from analytics.member_attributes_general", 'prod')
vbQuery("select count(*) from analytics.member_attributes_engagement", 'test')
vbQuery("select count(*) from analytics.member_attributes_engagement", 'prod')
library(vb)2372580
library(vb)
vbQuery("select * from stockblocks_master.stock_items where id = 2372580 and site_id = 1")
shiny::runApp('VideoBlocks/shiny-server/ab_test_2.0')
shiny::runApp('Side Projects/Vettd/Westmonroe/Westmonroe')
?menuItem
runApp('Side Projects/Vettd/Westmonroe/Westmonroe')
library(ggplot2)
library(gganimate)
library(rgdal)
library(RMySQL)
library(ggthemes)
library(tidyverse)
library(animation)
setwd('C:/Users/Charlie/Documents/Side Projects/midnight barber/shiny-server/bikeshare/')
geojson_raw <- readOGR('neighorhoods.geojson.txt', 'OGRGeoJSON')
conn <- dbConnect(MySQL(),
user = 'rcharlie',
password = 'charlie86',
dbname = 'rcharlie',
host = "rcharlie.ch74fm7hgclb.us-west-2.rds.amazonaws.com")
test <- dbGetQuery(conn, "
SELECT
bsl.neighborhood
, hour(bd.last_updated) as hour
, sum(bd.bikes) / sum(bd.bikes + bd.docks) AS pct_full
FROM bikeshare_station_lookup bsl
INNER JOIN bikeshare_deduped bd
ON bsl.station_id = bd.station_id
AND bsl.neighborhood IS NOT NULL
AND bd.last_updated IS NOT NULL
group by 1,2;")
ggdata <- fortify(geojson_raw) %>%
mutate(id = as.numeric(id)) %>%
left_join(geojson_raw@data, by = 'id') %>%
mutate_at(c('quadrant', 'subhood'), as.character) %>%
left_join(test, by = c('subhood' = 'neighborhood'))
magickPath <- shortPathName("C:\\Program Files\\ImageMagick-7.0.5-Q16\\magick.exe")
ani.options(convert=magickPath)
p = ggplot(data = ggdata, aes(x = long, y = lat, group = id, fill = pct_full, frame = hour)) +
geom_polygon(color = 'black') +
scale_fill_gradient(low = 'white', high = 'blue') +
theme_tufte() +
theme(axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank())
gganimate(p)
head(test)
test %>% filter(neighborhood == 'Washinton Heights')
test %>% filter(neighborhood == 'Washington Heights')
test %>% filter(neighborhood == 'Washington Heights') %>% hchart(hcaes(x = hour, y= pct_full), type= 'line')
library(highcharter)
test %>% filter(neighborhood == 'Washington Heights') %>% hchart(hcaes(x = hour, y= pct_full), type= 'line')
dbReadTable('bikeshare_station_lookup') %>% head
dbReadTable(conn, 'bikeshare_station_lookup') %>% head
dbReadTable(conn, 'bikeshare_station_lookup') %>% filter(grepl('Belmont', station_name))
test <- dbGetQuery(conn, "
SELECT
bsl.neighborhood
, hour(bd.last_updated) as hour
, sum(bd.bikes) / sum(bd.bikes + bd.docks) AS pct_full
FROM bikeshare_station_lookup bsl
INNER JOIN bikeshare_deduped bd
ON bsl.station_id = bd.station_id
AND bsl.neighborhood IS NOT NULL
AND bd.last_updated IS NOT NULL
AND bsl.station_name = 'Columbia Rd & Belmont St NW'
group by 1,2;")
head(test)
test %>% filter(neighborhood == 'Washington Heights') %>% hchart(hcaes(x = hour, y= pct_full), type= 'line')
dbGetQuery(conn, "select * from bikeshare_deduped limit 5")
test <- dbGetQuery(conn, "
SELECT
bsl.neighborhood
, dayofweek(bd.last_updated) as day_of_week
, hour(bd.last_updated) as hour
, sum(bd.bikes) / sum(bd.bikes + bd.docks) AS pct_full
FROM bikeshare_station_lookup bsl
INNER JOIN bikeshare_deduped bd
ON bsl.station_id = bd.station_id
AND bsl.neighborhood IS NOT NULL
AND bd.last_updated IS NOT NULL
AND bsl.station_name = 'Columbia Rd & Belmont St NW'
group by 1,2,3;")
test %>% filter(day_of_week == 4) %>% hchart(hcaes(x = hour, y= pct_full), type= 'line')
test <- dbGetQuery(conn, "
SELECT
bsl.neighborhood
, dayofweek(bd.last_updated) as day_of_week
, hour(bd.last_updated) - 4 as hour
, sum(bd.bikes) / sum(bd.bikes + bd.docks) AS pct_full
FROM bikeshare_station_lookup bsl
INNER JOIN bikeshare_deduped bd
ON bsl.station_id = bd.station_id
AND bsl.neighborhood IS NOT NULL
AND bd.last_updated IS NOT NULL
AND bsl.station_name = 'Columbia Rd & Belmont St NW'
group by 1,2,3;")
test <- dbGetQuery(conn, "
SELECT
bsl.neighborhood
, dayofweek(dateadd(hour, -4, bd.last_updated)) as day_of_week
, hour(dateadd(hour, -4, bd.last_updated)) as hour
, sum(bd.bikes) / sum(bd.bikes + bd.docks) AS pct_full
FROM bikeshare_station_lookup bsl
INNER JOIN bikeshare_deduped bd
ON bsl.station_id = bd.station_id
AND bsl.neighborhood IS NOT NULL
AND bd.last_updated IS NOT NULL
AND bsl.station_name = 'Columbia Rd & Belmont St NW'
group by 1,2,3;")
test <- dbGetQuery(conn, "
SELECT
bsl.neighborhood
, dayofweek(date_add(bd.last_updated, INTERVAL -4 HOUR)) as day_of_week
, hour(date_add(bd.last_updated, INTERVAL -4 HOUR)) as hour
, sum(bd.bikes) / sum(bd.bikes + bd.docks) AS pct_full
FROM bikeshare_station_lookup bsl
INNER JOIN bikeshare_deduped bd
ON bsl.station_id = bd.station_id
AND bsl.neighborhood IS NOT NULL
AND bd.last_updated IS NOT NULL
AND bsl.station_name = 'Columbia Rd & Belmont St NW'
group by 1,2,3;")
test
test %>% filter(day_of_week == 4) %>% hchart(hcaes(x = hour, y= pct_full), type= 'line')
test %>% filter(day_of_week == 5) %>% hchart(hcaes(x = hour, y= pct_full), type= 'line')
ggdata <- fortify(geojson_raw) %>%
filter(day_of_week == 5) %>%
mutate(id = as.numeric(id)) %>%
left_join(geojson_raw@data, by = 'id') %>%
mutate_at(c('quadrant', 'subhood'), as.character) %>%
left_join(test, by = c('subhood' = 'neighborhood'))
ggdata <- fortify(geojson_raw) %>%
mutate(id = as.numeric(id)) %>%
left_join(geojson_raw@data, by = 'id') %>%
mutate_at(c('quadrant', 'subhood'), as.character) %>%
left_join(test, by = c('subhood' = 'neighborhood')) %>%
filter(day_of_week == 5)
p = ggplot(data = ggdata, aes(x = long, y = lat, group = id, fill = pct_full, frame = hour)) +
geom_polygon(color = 'black') +
scale_fill_gradient(low = 'white', high = 'blue') +
theme_tufte() +
theme(axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank())
gganimate(p)
test <- dbGetQuery(conn, "
SELECT
bsl.neighborhood
, dayofweek(date_add(bd.last_updated, INTERVAL -4 HOUR)) as day_of_week
, hour(date_add(bd.last_updated, INTERVAL -4 HOUR)) as hour
, sum(bd.bikes) / sum(bd.bikes + bd.docks) AS pct_full
FROM bikeshare_station_lookup bsl
INNER JOIN bikeshare_deduped bd
ON bsl.station_id = bd.station_id
AND bsl.neighborhood IS NOT NULL
AND bd.last_updated IS NOT NULL
group by 1,2,3;")
ggdata <- fortify(geojson_raw) %>%
mutate(id = as.numeric(id)) %>%
left_join(geojson_raw@data, by = 'id') %>%
mutate_at(c('quadrant', 'subhood'), as.character) %>%
left_join(test, by = c('subhood' = 'neighborhood')) %>%
filter(day_of_week == 5)
p = ggplot(data = ggdata, aes(x = long, y = lat, group = id, fill = pct_full, frame = hour)) +
geom_polygon(color = 'black') +
scale_fill_gradient(low = 'white', high = 'blue') +
theme_tufte() +
theme(axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank())
gganimate(p)
ggdata <- fortify(geojson_raw) %>%
mutate(id = as.numeric(id)) %>%
left_join(geojson_raw@data, by = 'id') %>%
mutate_at(c('quadrant', 'subhood'), as.character) %>%
left_join(test, by = c('subhood' = 'neighborhood')) %>%
filter(day_of_week == 5 | is.na(day_of_week))
p = ggplot(data = ggdata, aes(x = long, y = lat, group = id, fill = pct_full, frame = hour)) +
geom_polygon(color = 'black') +
scale_fill_gradient(low = 'white', high = 'blue') +
theme_tufte() +
theme(axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank())
gganimate(p)
ggdata <- fortify(geojson_raw) %>%
mutate(id = as.numeric(id)) %>%
left_join(geojson_raw@data, by = 'id') %>%
mutate_at(c('quadrant', 'subhood'), as.character) %>%
left_join(test %>% filter(hour >= 5 & hour <= 22), by = c('subhood' = 'neighborhood')) %>%
filter(day_of_week == 5 | is.na(day_of_week))
p = ggplot(data = ggdata, aes(x = long, y = lat, group = id, fill = pct_full, frame = hour)) +
geom_polygon(color = 'black') +
scale_fill_gradient(low = 'white', high = 'blue') +
theme_tufte() +
theme(axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank())
gganimate(p)
test <- dbGetQuery(conn, "
SELECT
bsl.neighborhood
, dayofweek(date_add(bd.last_updated, INTERVAL -4 HOUR)) as day_of_week
, hour(date_add(bd.last_updated, INTERVAL -4 HOUR)) as hour
, sum(bd.bikes) as num_bikes
, sum(bd.docks) as num_docks
, sum(bd.bikes) / sum(bd.bikes + bd.docks) AS pct_full
FROM bikeshare_station_lookup bsl
INNER JOIN bikeshare_deduped bd
ON bsl.station_id = bd.station_id
AND bsl.neighborhood IS NOT NULL
AND bd.last_updated IS NOT NULL
group by 1,2,3;")
ggdata <- fortify(geojson_raw) %>%
mutate(id = as.numeric(id)) %>%
left_join(geojson_raw@data, by = 'id') %>%
mutate_at(c('quadrant', 'subhood'), as.character) %>%
left_join(test %>% filter(hour >= 5 & hour <= 22), by = c('subhood' = 'neighborhood')) %>%
filter(day_of_week == 5 | is.na(day_of_week))
p = ggplot(data = ggdata, aes(x = long, y = lat, group = id, fill = num_bikes, frame = hour)) +
geom_polygon(color = 'black') +
# scale_fill_gradient(low = 'white', high = 'blue') +
theme_tufte() +
theme(axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank())
gganimate(p)
head(test)
p = ggplot(data = ggdata, aes(x = long, y = lat, group = id, fill = num_bikes, frame = hour)) +
geom_polygon(color = 'black') +
scale_fill_gradient(low = 'white', high = 'blue') +
theme_tufte() +
theme(axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank())
gganimate(p)
