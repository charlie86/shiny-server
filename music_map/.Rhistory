)
server = function(input, output) {
output$hc_1 <- renderHighchart({
hc <- hc_base %>%
hc_plotOptions(
series = list(
cursor = "pointer"
)
) %>%
hc_add_event_point(event = "mouseOver") %>%
hc_add_event_point(event = "click")
hc
})
output$hc_1_input1 <- renderPrint({ input$hc_1_mouseOver })
output$hc_1_input2 <- renderPrint({ input$hc_1_click })
output$hc_2 <- renderHighchart({
hc <- hc_base %>%
hc_plotOptions(
series = list(
cursor = "pointer"
)
) %>%
hc_add_event_series(series = 'point', event = "mouseOver") %>%
hc_add_event_series(event = "click")
hc
})
output$hc_2_input1 <- renderPrint({ input$hc_2_mouseOver })
output$hc_2_input2 <- renderPrint({ input$hc_2_click })
}
shinyApp(ui = ui, server = server)
?hc_add_event_point
??hc_add_event_point
hc_add_event_point
rm(list = ls())
library(shiny)
library(highcharter)
library(tidyverse)
hc_add_event_point <- function(hc, series = "series", event = "click"){
fun <- paste0("function(){
var pointinfo = {series: this.series.name, seriesid: this.series.id,
name: this.name, x: this.x, y: this.y, category: this.category.name}
window.x = this;
console.log(pointinfo);
if (typeof Shiny != 'undefined') { Shiny.onInputChange(this.series.chart.renderTo.id + '_' + '", event, "', pointinfo); }
}")
fun <- JS(fun)
eventobj <- structure(
list(structure(
list(structure(
list(structure(
list(fun),
.Names = event)
),
.Names = "events")
),
.Names = "point")
),
.Names = series
)
hc$x$hc_opts$plotOptions <- rlist::list.merge(
hc$x$hc_opts$plotOptions,
eventobj
)
hc
}
hc_add_event_series <- function(hc, series = "series", event = "click"){
fun <- paste0("function(){
var seriesinfo = {name: this.name }
console.log(seriesinfo);
window.x = this;
if (typeof Shiny != 'undefined') { Shiny.onInputChange(this.chart.renderTo.id + '_' + '", event, "', seriesinfo); }
}")
fun <- JS(fun)
eventobj <- structure(
list(structure(
list(structure(
list(fun),
.Names = event)
),
.Names = "events")
),
.Names = series
)
hc$x$hc_opts$plotOptions <- rlist::list.merge(
hc$x$hc_opts$plotOptions,
eventobj
)
hc
}
hc_elementId <- function(hc, id = NULL) {
assertthat::assert_that(is.highchart(hc))
hc$elementId <- as.character(id)
hc
}
hc_size <- function(hc, width = NULL, height = NULL) {
assertthat::assert_that(is.highchart(hc))
if (!is.null(width))
hc$width <- width
if (!is.null(height))
hc$height <- height
hc
}
.hc_tooltip_table <- function(hc, ...) {
# http://stackoverflow.com/a/22327749/829971
hc %>%
highcharter::hc_tooltip(
shared = TRUE,
useHTML = TRUE,
headerFormat = "<small>{point.key}</small><table>",
pointFormat = "<tr><td style=\"color: {series.color}\">{series.name}: </td><td style=\"text-align: right\"><b>{point.y}</b></td></tr>",
footerFormat = "</table>"
)
}
.hc_tooltip_sort <- function(hc, ...) {
# http://stackoverflow.com/a/16954666/829971
hc %>%
highcharter::hc_tooltip(
shared = TRUE,
formatter = JS(
"function(tooltip){
function isArray(obj) {
return Object.prototype.toString.call(obj) === '[object Array]';
}
function splat(obj) {
return isArray(obj) ? obj : [obj];
}
var items = this.points || splat(this), series = items[0].series, s;
// sort the values
items.sort(function(a, b){
return ((a.y < b.y) ? -1 : ((a.y > b.y) ? 1 : 0));
});
items.reverse();
return tooltip.defaultFormatter.call(this, tooltip);
}"))
}
tooltip_chart <- function(
accesor = NULL,
hc_opts = NULL,
width = 250,
height = 150
) {
assertthat::assert_that(assertthat::is.string(accesor))
if(is.null(hc_opts)) {
hc_opts[["series"]][[1]] <- list(data =  sprintf("point.%s", accesor))
} else {
if(!has_name(hc_opts, "series"))
hc_opts[["series"]][[1]] <- list()
hc_opts[["series"]][[1]][["data"]] <- sprintf("point.%s", accesor)
}
hc_opts <- rlist::list.merge(
getOption("highcharter.chart")[c("title", "yAxis", "xAxis", "credits", "exporting")],
list(chart = list(backgroundColor = "transparent")),
list(legend = list(enabled = FALSE), plotOptions = list(series = list(animation = FALSE))),
hc_opts
)
if(!has_name(hc_opts[["series"]][[1]], "color")) hc_opts[["series"]][[1]][["color"]] <- "point.color"
hcopts <- toJSON(hc_opts, pretty = TRUE, auto_unbox = TRUE, force = TRUE, null = "null", na = "null")
hcopts <- as.character(hcopts)
# cat(hcopts)
# fix point.color
hcopts <- str_replace(hcopts, "\\{point.color\\}", "point.color")
# remove "\"" to have access to the point object
ts <- stringr::str_extract_all(hcopts, "\"point\\.\\w+\"") %>% unlist()
for(t in ts) hcopts <- str_replace(hcopts, t, str_replace_all(t, "\"", ""))
# remove "\"" in the options
ts <- stringr::str_extract_all(hcopts, "\"\\w+\":") %>%  unlist()
for(t in ts) {
t2 <- str_replace_all(t, "\"", "")
# t2 <- str_replace(t2, ":", "")
hcopts <- str_replace(hcopts, t, t2)
}
# cat(hcopts)
jss <- "function() {
var point = this;
console.log(point);
console.log(point.{{accesor}});
setTimeout(function() {
$(\"#tooltipchart-{{id}}\").highcharts(hcopts);
}, 0);
return '<div id=\"tooltipchart-{{id}}\" style=\"width: {{w}}px; height: {{h}}px;\"></div>';
}"
# cat(jss)
jsss <- whisker.render(
jss,
list(id = random_id(), w = width, h = height, accesor = accesor)
)
# cat(jsss)
jsss <- stringr::str_replace(jsss, "hcopts", hcopts)
# cat(jsss)
JS(jsss)
}
tooltip_table <- function(x, y,
title = NULL,
img = NULL, ...) {
assertthat::assert_that(length(x) == length(y))
tbl <- map2(x, y, function(x, y){
tags$tr(
tags$th(x),
tags$td(y)
)
})
tbl <- tags$table(tbl, ...)
if (!is.null(title))
tbl <- tagList(title, tbl)
if (!is.null(img))
tbl <- tagList(tbl, img)
as.character(tbl)
}
options(highcharter.theme = hc_theme_smpl())
hc <- highcharts_demo()
hc_base <- hchart(mpg, "scatter", hcaes(x = cty, y = displ, group = class, name = model))
ui <- fluidPage(
h2("Highcharter as Shiny Inputs"),
fluidRow(
column(6, h3("Point Event"), highchartOutput("hc_1")),
column(3, h3("MouseOver"), verbatimTextOutput("hc_1_input1")),
column(3, h3("Click"), verbatimTextOutput("hc_1_input2"))
),
fluidRow(
column(6, h3("Series Event"), highchartOutput("hc_2")),
column(3, h3("MouseOver"), verbatimTextOutput("hc_2_input1")),
column(3, h3("Click"), verbatimTextOutput("hc_2_input2"))
)
)
server = function(input, output) {
output$hc_1 <- renderHighchart({
hc <- hc_base %>%
hc_plotOptions(
series = list(
cursor = "pointer"
)
) %>%
hc_add_event_point(series = 'point', event = "mouseOver") %>%
hc_add_event_point(event = "click")
hc
})
output$hc_1_input1 <- renderPrint({ input$hc_1_mouseOver })
output$hc_1_input2 <- renderPrint({ input$hc_1_click })
output$hc_2 <- renderHighchart({
hc <- hc_base %>%
hc_plotOptions(
series = list(
cursor = "pointer"
)
) %>%
hc_add_event_series(event = "mouseOver") %>%
hc_add_event_series(event = "click")
hc
})
output$hc_2_input1 <- renderPrint({ input$hc_2_mouseOver })
output$hc_2_input2 <- renderPrint({ input$hc_2_click })
}
shinyApp(ui = ui, server = server)
rm(list = ls())
library(shiny)
library(highcharter)
library(tidyverse)
hc_add_event_point <- function(hc, series = "series", event = "click"){
fun <- paste0("function(){
var pointinfo = {series: this.series.name, seriesid: this.series.id,
name: this.name, x: this.x, y: this.y, category: this.category.name}
window.x = this;
console.log(pointinfo);
if (typeof Shiny != 'undefined') { Shiny.onInputChange(this.series.chart.renderTo.id + '_' + '", event, "', pointinfo); }
}")
fun <- JS(fun)
eventobj <- structure(
list(structure(
list(structure(
list(structure(
list(fun),
.Names = event)
),
.Names = "events")
),
.Names = "point")
),
.Names = series
)
hc$x$hc_opts$plotOptions <- rlist::list.merge(
hc$x$hc_opts$plotOptions,
eventobj
)
hc
}
hc_add_event_series <- function(hc, series = "series", event = "click"){
fun <- paste0("function(){
var seriesinfo = {name: this.name }
console.log(seriesinfo);
window.x = this;
if (typeof Shiny != 'undefined') { Shiny.onInputChange(this.chart.renderTo.id + '_' + '", event, "', seriesinfo); }
}")
fun <- JS(fun)
eventobj <- structure(
list(structure(
list(structure(
list(fun),
.Names = event)
),
.Names = "events")
),
.Names = series
)
hc$x$hc_opts$plotOptions <- rlist::list.merge(
hc$x$hc_opts$plotOptions,
eventobj
)
hc
}
hc_elementId <- function(hc, id = NULL) {
assertthat::assert_that(is.highchart(hc))
hc$elementId <- as.character(id)
hc
}
hc_size <- function(hc, width = NULL, height = NULL) {
assertthat::assert_that(is.highchart(hc))
if (!is.null(width))
hc$width <- width
if (!is.null(height))
hc$height <- height
hc
}
.hc_tooltip_table <- function(hc, ...) {
# http://stackoverflow.com/a/22327749/829971
hc %>%
highcharter::hc_tooltip(
shared = TRUE,
useHTML = TRUE,
headerFormat = "<small>{point.key}</small><table>",
pointFormat = "<tr><td style=\"color: {series.color}\">{series.name}: </td><td style=\"text-align: right\"><b>{point.y}</b></td></tr>",
footerFormat = "</table>"
)
}
.hc_tooltip_sort <- function(hc, ...) {
# http://stackoverflow.com/a/16954666/829971
hc %>%
highcharter::hc_tooltip(
shared = TRUE,
formatter = JS(
"function(tooltip){
function isArray(obj) {
return Object.prototype.toString.call(obj) === '[object Array]';
}
function splat(obj) {
return isArray(obj) ? obj : [obj];
}
var items = this.points || splat(this), series = items[0].series, s;
// sort the values
items.sort(function(a, b){
return ((a.y < b.y) ? -1 : ((a.y > b.y) ? 1 : 0));
});
items.reverse();
return tooltip.defaultFormatter.call(this, tooltip);
}"))
}
tooltip_chart <- function(
accesor = NULL,
hc_opts = NULL,
width = 250,
height = 150
) {
assertthat::assert_that(assertthat::is.string(accesor))
if(is.null(hc_opts)) {
hc_opts[["series"]][[1]] <- list(data =  sprintf("point.%s", accesor))
} else {
if(!has_name(hc_opts, "series"))
hc_opts[["series"]][[1]] <- list()
hc_opts[["series"]][[1]][["data"]] <- sprintf("point.%s", accesor)
}
hc_opts <- rlist::list.merge(
getOption("highcharter.chart")[c("title", "yAxis", "xAxis", "credits", "exporting")],
list(chart = list(backgroundColor = "transparent")),
list(legend = list(enabled = FALSE), plotOptions = list(series = list(animation = FALSE))),
hc_opts
)
if(!has_name(hc_opts[["series"]][[1]], "color")) hc_opts[["series"]][[1]][["color"]] <- "point.color"
hcopts <- toJSON(hc_opts, pretty = TRUE, auto_unbox = TRUE, force = TRUE, null = "null", na = "null")
hcopts <- as.character(hcopts)
# cat(hcopts)
# fix point.color
hcopts <- str_replace(hcopts, "\\{point.color\\}", "point.color")
# remove "\"" to have access to the point object
ts <- stringr::str_extract_all(hcopts, "\"point\\.\\w+\"") %>% unlist()
for(t in ts) hcopts <- str_replace(hcopts, t, str_replace_all(t, "\"", ""))
# remove "\"" in the options
ts <- stringr::str_extract_all(hcopts, "\"\\w+\":") %>%  unlist()
for(t in ts) {
t2 <- str_replace_all(t, "\"", "")
# t2 <- str_replace(t2, ":", "")
hcopts <- str_replace(hcopts, t, t2)
}
# cat(hcopts)
jss <- "function() {
var point = this;
console.log(point);
console.log(point.{{accesor}});
setTimeout(function() {
$(\"#tooltipchart-{{id}}\").highcharts(hcopts);
}, 0);
return '<div id=\"tooltipchart-{{id}}\" style=\"width: {{w}}px; height: {{h}}px;\"></div>';
}"
# cat(jss)
jsss <- whisker.render(
jss,
list(id = random_id(), w = width, h = height, accesor = accesor)
)
# cat(jsss)
jsss <- stringr::str_replace(jsss, "hcopts", hcopts)
# cat(jsss)
JS(jsss)
}
tooltip_table <- function(x, y,
title = NULL,
img = NULL, ...) {
assertthat::assert_that(length(x) == length(y))
tbl <- map2(x, y, function(x, y){
tags$tr(
tags$th(x),
tags$td(y)
)
})
tbl <- tags$table(tbl, ...)
if (!is.null(title))
tbl <- tagList(title, tbl)
if (!is.null(img))
tbl <- tagList(tbl, img)
as.character(tbl)
}
options(highcharter.theme = hc_theme_smpl())
hc <- highcharts_demo()
hc_base <- hchart(mpg, "scatter", hcaes(x = cty, y = displ, group = class, name = model))
ui <- fluidPage(
h2("Highcharter as Shiny Inputs"),
fluidRow(
column(6, h3("Point Event"), highchartOutput("hc_1")),
column(3, h3("MouseOver"), verbatimTextOutput("hc_1_input1")),
column(3, h3("Click"), verbatimTextOutput("hc_1_input2"))
),
fluidRow(
column(6, h3("Series Event"), highchartOutput("hc_2")),
column(3, h3("MouseOver"), verbatimTextOutput("hc_2_input1")),
column(3, h3("Click"), verbatimTextOutput("hc_2_input2"))
)
)
server = function(input, output) {
output$hc_1 <- renderHighchart({
hc <- hc_base %>%
hc_plotOptions(
series = list(
cursor = "pointer"
)
) %>%
hc_add_event_point(event = "mouseOver") %>%
hc_add_event_point(event = "click")
hc
})
output$hc_1_input1 <- renderPrint({ input$hc_1_mouseOver })
output$hc_1_input2 <- renderPrint({ input$hc_1_click })
output$hc_2 <- renderHighchart({
hc <- hc_base %>%
hc_plotOptions(
series = list(
cursor = "pointer"
)
) %>%
hc_add_event_series(event = "mouseOver") %>%
hc_add_event_series(event = "click")
hc
})
output$hc_2_input1 <- renderPrint({ input$hc_2_mouseOver })
output$hc_2_input2 <- renderPrint({ input$hc_2_click })
}
shinyApp(ui = ui, server = server)
mpg
track_df
track_df
runApp('Documents/midnightBarber/shiny-server/sentify')
runApp('Documents/midnightBarber/shiny-server/sentify')
track_df
track_df$track_open_spotify_url
track_df$valence
runApp('Documents/midnightBarber/shiny-server/sentify')
track_df
track_df$track_open_spotify_url
playlist_track_hover
track_df$playlist_name
runApp('Documents/midnightBarber/shiny-server/sentify')
runApp('Documents/midnightBarber/shiny-server/sentify')
runApp('Documents/midnightBarber/shiny-server/sentify')
runApp('Documents/midnightBarber/shiny-server/sentify')
runApp('Documents/midnightBarber/shiny-server/sentify')
runApp('Documents/midnightBarber/shiny-server/sentify')
current_tab
runApp('Documents/midnightBarber/shiny-server/sentify')
current_tab
runApp('Documents/midnightBarber/shiny-server/sentify')
runApp('Documents/midnightBarber/shiny-server/sentify')
runApp('Documents/midnightBarber/shiny-server/sentify')
rm(list = ls())
shiny::runApp('Documents/midnightBarber/shiny-server/music_map')
runApp('Documents/midnightBarber/shiny-server/music_map')
runApp('Documents/midnightBarber/shiny-server/music_map')
mouseover_country
runApp('Documents/midnightBarber/shiny-server/music_map')
country_features[[selected_map_metric]][country_features$iso3c == mouseover_country]
selected_map_metric
country_features[[selected_map_metric]]
mouseover_country
mouseover_country
runApp('Documents/midnightBarber/shiny-server/music_map')
shiny::runApp('Documents/midnightBarber/shiny-server/music_map')
runApp('Documents/midnightBarber/shiny-server/music_map')
