this_feature <- country_valence[[feature]][country_features$iso3c == country_id]
if (length(this_feature) == 0) {
return(NA)
} else {
return(this_feature)
}
}) %>% unlist
}) %>% unlist
map(countries$id, function(country_id) {
map(feature_vars, function(feature) {
this_feature <- country_valence[[feature]][country_features$iso3c == country_id]
if (length(this_feature) == 0) {
value <- NA
} else {
value <- this_feature
}
countries[[feature]][countries$id == country_id] <- value
})
})
map(countries$id, function(country_id) {
map(feature_vars, function(feature) {
this_feature <- country_valence[[feature]][country_features$iso3c == country_id]
if (length(this_feature) == 0) {
value <- NA
} else {
value <- this_feature
}
countries[[feature]][countries$id == country_id] <<- value
})
})
countries$valence
countries$danceability
countries$loudness
countries[['loudness']]
countries[['loudness']][countries$id == 'USA']
map(countries$id, function(country_id) {
map(feature_vars, function(feature) {
this_feature <- country_features[[feature]][country_features$iso3c == country_id]
if (length(this_feature) == 0) {
value <- NA
} else {
value <- this_feature
}
countries[[feature]][countries$id == country_id] <<- value
})
})
countries$danceability
countries$speechiness
countries$danceability[countries$id == 'USA']
country_features %>% head
country_features %>% filter(iso3c == 'USA')
leaflet(countries) %>%
addTiles() %>%
addPolygons(opacity = 1, color = 'black', weight = 1, smoothFactor = 0.3, fillOpacity = 1,
fillColor = ~pal('valence'),
label = ~paste0(name, ": ", formatC('valence', big.mark = ","))) %>%
addLegend(pal = pal, values = ~'valence', opacity = 1.0)
leaflet(countries) %>%
addTiles() %>%
addPolygons(opacity = 1, color = 'black', weight = 1, smoothFactor = 0.3, fillOpacity = 1,
fillColor = ~pal(valence),
label = ~paste0(name, ": ", formatC(valence, big.mark = ","))) %>%
addLegend(pal = pal, values = ~valence, opacity = 1.0)
leaflet(countries) %>%
addTiles() %>%
addPolygons(opacity = 1, color = 'black', weight = 1, smoothFactor = 0.3, fillOpacity = 1,
fillColor = ~pal(danceability),
label = ~paste0(name, ": ", formatC(danceability, big.mark = ","))) %>%
addLegend(pal = pal, values = ~danceability, opacity = 1.0)
leaflet(countries) %>%
addTiles() %>%
addPolygons(opacity = 1, color = 'black', weight = 1, smoothFactor = 0.3, fillOpacity = 1,
fillColor = ~pal(energy),
label = ~paste0(name, ": ", formatC(energy, big.mark = ","))) %>%
addLegend(pal = pal, values = ~energy, opacity = 1.0)
leaflet(countries) %>%
addTiles() %>%
addPolygons(opacity = 1, color = 'black', weight = 1, smoothFactor = 0.3, fillOpacity = 1,
fillColor = ~pal(tempo),
label = ~paste0(name, ": ", formatC(tempo, big.mark = ","))) %>%
addLegend(pal = pal, values = ~tempo, opacity = 1.0)
leaflet(countries) %>%
addTiles() %>%
addPolygons(opacity = 1, color = 'black', weight = 1, smoothFactor = 0.3, fillOpacity = 1,
fillColor = ~pal(valence),
label = ~paste0(name, ": ", formatC(valence, big.mark = ","))) %>%
addLegend(pal = pal, values = ~valence, opacity = 1.0)
vbPeek('event.gs_search_log')
geo_tracks %>% he3ad
geo_tracks %>% head
geo_tracks %>% head %>% as.data.frame(x = )
geo_tracks %>% head %>% as.data.frame
rm(list = ls())
library(shiny)
library(highcharter)
library(tidyverse)
options(highcharter.theme = hc_theme_smpl())
hc <- highcharts_demo()
hc_base <- hchart(mpg, "scatter", hcaes(x = cty, y = displ, group = class, name = model))
ui <- fluidPage(
h2("Highcharter as Shiny Inputs"),
fluidRow(
column(6, h3("Point Event"), highchartOutput("hc_1")),
column(3, h3("MouseOver"), verbatimTextOutput("hc_1_input1")),
column(3, h3("Click"), verbatimTextOutput("hc_1_input2"))
),
fluidRow(
column(6, h3("Series Event"), highchartOutput("hc_2")),
column(3, h3("MouseOver"), verbatimTextOutput("hc_2_input1")),
column(3, h3("Click"), verbatimTextOutput("hc_2_input2"))
)
)
server = function(input, output) {
output$hc_1 <- renderHighchart({
hc <- hc_base %>%
hc_plotOptions(
series = list(
cursor = "pointer"
)
) %>%
hc_add_event_point(event = "mouseOver") %>%
hc_add_event_point(event = "click")
hc
})
output$hc_1_input1 <- renderPrint({ input$hc_1_mouseOver })
output$hc_1_input2 <- renderPrint({ input$hc_1_click })
output$hc_2 <- renderHighchart({
hc <- hc_base %>%
hc_plotOptions(
series = list(
cursor = "pointer"
)
) %>%
hc_add_event_series(event = "mouseOver") %>%
hc_add_event_series(event = "click")
hc
})
output$hc_2_input1 <- renderPrint({ input$hc_2_mouseOver })
output$hc_2_input2 <- renderPrint({ input$hc_2_click })
}
shinyApp(ui = ui, server = server)
head(countries)
list.files()
countries <- geojsonio::geojson_read("countries.geo.json",
what = "sp")
map(countries$id, function(country_id) {
map(feature_vars, function(feature) {
this_feature <- country_features[[feature]][country_features$iso3c == country_id]
if (length(this_feature) == 0) {
value <- NA
} else {
value <- this_feature
}
countries[[feature]][countries$id == country_id] <<- value
})
})
countries <- countries %>%
left_join(country_valence, by = c('id' = 'iso3c'))
feature_vars <- c('danceability', 'energy', 'loudness', 'speechiness', 'acousticness', 'instrumentalness', 'liveness', 'valence', 'tempo', 'duration_ms')
country_features <- geo_tracks %>%
group_by(country_abb, iso3c, country) %>%
summarise_at(feature_vars, funs(mean(., na.rm = T)))
load('geo_tracks.RData')
country_features <- geo_tracks %>%
group_by(country_abb, iso3c, country) %>%
summarise_at(feature_vars, funs(mean(., na.rm = T)))
# download.file('https://raw.githubusercontent.com/johan/world.geo.json/master/countries.geo.json', destfile = 'countries.geo.json')
countries <- geojsonio::geojson_read("countries.geo.json",
what = "sp")
map(countries$id, function(country_id) {
map(feature_vars, function(feature) {
this_feature <- country_features[[feature]][country_features$iso3c == country_id]
if (length(this_feature) == 0) {
value <- NA
} else {
value <- this_feature
}
countries[[feature]][countries$id == country_id] <<- value
})
})
countries <- countries %>%
left_join(country_valence, by = c('id' = 'iso3c'))
country_features <- geo_tracks %>%
group_by(country_abb, iso3c, country) %>%
summarise_at(feature_vars, funs(mean(., na.rm = T)))
list.files()
load('city_playlist_tracks.RData')
geo_tracks <- city_playlist_tracks %>%
left_join(city_playlist_track_popularity, by = 'track_uri') %>%
left_join(city_playlist_track_audio_features, by = 'track_uri') %>%
unique %>%
mutate(city_country = gsub('The Sound of ', '', playlist_name),
city = gsub(' [[:upper:]]{2}$', '', city_country),
country_abb = str_extract(playlist_name, '[[:upper:]]{2}$')) %>%
left_join(select(countrycode_data, iso2c, iso3c, region, continent, country = country.name.en), by = c('country_abb' = 'iso2c'))
save(geo_tracks, file = 'geo_tracks.RData')
write.csv(geo_tracks, 'geo_tracks.csv', row.names = F)
load('geo_tracks.RData')
feature_vars <- c('danceability', 'energy', 'loudness', 'speechiness', 'acousticness', 'instrumentalness', 'liveness', 'valence', 'tempo', 'duration_ms')
country_features <- geo_tracks %>%
group_by(country_abb, iso3c, country) %>%
summarise_at(feature_vars, funs(mean(., na.rm = T)))
# download.file('https://raw.githubusercontent.com/johan/world.geo.json/master/countries.geo.json', destfile = 'countries.geo.json')
countries <- geojsonio::geojson_read("countries.geo.json",
what = "sp")
map(countries$id, function(country_id) {
map(feature_vars, function(feature) {
this_feature <- country_features[[feature]][country_features$iso3c == country_id]
if (length(this_feature) == 0) {
value <- NA
} else {
value <- this_feature
}
countries[[feature]][countries$id == country_id] <<- value
})
})
countries <- countries %>%
left_join(country_valence, by = c('id' = 'iso3c'))
head(city_playlist_tracks)
head(countrycode_data)
geo_tracks <- city_playlist_tracks %>%
left_join(city_playlist_track_popularity, by = 'track_uri') %>%
left_join(city_playlist_track_audio_features, by = 'track_uri') %>%
unique %>%
mutate(city_country = gsub('The Sound of ', '', playlist_name),
city = gsub(' [[:upper:]]{2}$', '', city_country),
country_abb = str_extract(playlist_name, '[[:upper:]]{2}$')) %>%
left_join(select(countrycode_data, iso2c, iso3c, region, continent, country = country.name.en), by = c('country_abb' = 'iso2c'))
city_playlist_track_audio_features <- get_track_audio_features(city_playlist_tracks)
city_playlist_track_popularity <- get_track_popularity(city_playlist_tracks)
geo_tracks <- city_playlist_tracks %>%
left_join(city_playlist_track_popularity, by = 'track_uri') %>%
left_join(city_playlist_track_audio_features, by = 'track_uri') %>%
unique %>%
mutate(city_country = gsub('The Sound of ', '', playlist_name),
city = gsub(' [[:upper:]]{2}$', '', city_country),
country_abb = str_extract(playlist_name, '[[:upper:]]{2}$')) %>%
left_join(select(countrycode_data, iso2c, iso3c, region, continent, country = country.name.en), by = c('country_abb' = 'iso2c'))
geo_tracks
save(geo_tracks, file = 'geo_tracks.RData')
write.csv(geo_tracks, 'geo_tracks.csv', row.names = F)
feature_vars <- c('danceability', 'energy', 'loudness', 'speechiness', 'acousticness', 'instrumentalness', 'liveness', 'valence', 'tempo', 'duration_ms')
country_features <- geo_tracks %>%
group_by(country_abb, iso3c, country) %>%
summarise_at(feature_vars, funs(mean(., na.rm = T)))
# download.file('https://raw.githubusercontent.com/johan/world.geo.json/master/countries.geo.json', destfile = 'countries.geo.json')
countries <- geojsonio::geojson_read("countries.geo.json",
what = "sp")
map(countries$id, function(country_id) {
map(feature_vars, function(feature) {
this_feature <- country_features[[feature]][country_features$iso3c == country_id]
if (length(this_feature) == 0) {
value <- NA
} else {
value <- this_feature
}
countries[[feature]][countries$id == country_id] <<- value
})
})
countries <- countries %>%
left_join(country_valence, by = c('id' = 'iso3c'))
countries
pal <- colorNumeric("RdYlGn", domain = countries$valence, na.color = 'lightgrey')
leaflet(countries) %>%
addTiles() %>%
addPolygons(opacity = 1, color = 'black', weight = 1, smoothFactor = 0.3, fillOpacity = 1,
fillColor = ~pal(valence),
label = ~paste0(name, ": ", formatC(valence, big.mark = ","))) %>%
addLegend(pal = pal, values = ~valence, opacity = 1.0)
source('~/Documents/midnightBarber/sounds_of_spotify/geo_tracks.R')
Sys.getenv()
save(countries, file = 'countries.RData')
countries[['map_metric']] <- countries[[selected_map_metric]]
leaflet(countries) %>%
addTiles() %>%
addPolygons(opacity = 1, color = 'black', weight = 1, smoothFactor = 0.3, fillOpacity = 1,
fillColor = ~pal(map_metric),
label = ~paste0(name, ': ', formatC(map_metric, big.mark = ','))) %>%
addLegend(pal = pal, values = ~map_metric, opacity = 1.0)
selected_map_metric <- 'valence'
pal <- colorNumeric('RdYlGn', na.color = 'lightgrey')
countries[['map_metric']] <- countries[[selected_map_metric]]
leaflet(countries) %>%
addTiles() %>%
addPolygons(opacity = 1, color = 'black', weight = 1, smoothFactor = 0.3, fillOpacity = 1,
fillColor = ~pal(map_metric),
label = ~paste0(name, ': ', formatC(map_metric, big.mark = ','))) %>%
addLegend(pal = pal, values = ~map_metric, opacity = 1.0)
?addLegend
leaflet(countries) %>%
addTiles() %>%
addPolygons(opacity = 1, color = 'black', weight = 1, smoothFactor = 0.3, fillOpacity = 1,
fillColor = ~pal(map_metric),
label = ~paste0(name, ': ', formatC(map_metric, big.mark = ','))) %>%
addLegend(pal = pal, values = ~map_metric, opacity = 1.0, title = selected_map_metric)
library(shiny)
feature_vars <- c('danceability', 'energy', 'loudness', 'speechiness', 'acousticness', 'instrumentalness', 'liveness', 'valence', 'tempo', 'duration_ms')
runApp()
runApp()
runApp()
runApp()
?leafletOutput
runApp()
?leaflet
runApp()
list.files()
country_features
save(country_features, file = 'country_features.RData')
write.csv(country_features, file = 'country_features.csv', row.names = F)
country_features
country_features %>%
select_(c('country', selected_map_metric)
country_features %>%
select_(c('country', selected_map_metric))
country_features %>%
ungroup %>%
select_(c('country', selected_map_metric))
selected_map_metric <- 'valence'
ungroup %>%
select_(c('country', selected_map_metric))
ungroup %>%
select(c('country', selected_map_metric))
country_features %>%
ungroup %>%
select(c('country', selected_map_metric))
country_features %>%
ungroup %>%
select(c('country', 'metric' = selected_map_metric))
country_features %>%
ungroup %>%
select(c('country', selected_map_metric))
country_features %>%
ungroup %>%
select(c('country', selected_map_metric)) %>%
hchart(hcaes(x = country, y = 'valence'))
country_features %>%
ungroup %>%
select(c('country', feature_vars)) %>%
gather(metric, value, -country)
country_features %>%
ungroup %>%
select(c('country', feature_vars)) %>%
gather(metric, value, -country) %>%
filter(metric == selected_map_metric) %>%
hchart(hcaes(x = country, y = value, group = metric))
country_features %>%
ungroup %>%
select(c('country', feature_vars)) %>%
gather(metric, value, -country) %>%
filter(metric == selected_map_metric) %>%
hchart(hcaes(x = country, y = value, group = metric), type = 'bar')
country_features %>%
ungroup %>%
select(c('country', feature_vars)) %>%
gather(metric, value, -country) %>%
filter(metric == selected_map_metric) %>%
arrange(value) %>%
hchart(hcaes(x = country, y = value, group = metric), type = 'bar')
country_features %>%
ungroup %>%
select(c('country', feature_vars)) %>%
gather(metric, value, -country) %>%
filter(metric == selected_map_metric) %>%
arrange(value) %>%
hchart(hcaes(x = country, y = -value, group = metric), type = 'bar')
country_features %>%
ungroup %>%
select(c('country', feature_vars)) %>%
gather(metric, value, -country) %>%
filter(metric == selected_map_metric) %>%
arrange(-value) %>%
hchart(hcaes(x = country, y = value, group = metric), type = 'bar')
country_features %>%
ungroup %>%
select(c('country', feature_vars)) %>%
gather(metric, value, -country) %>%
filter(metric == selected_map_metric) %>%
arrange(-value) %>%
mutate(value = round(value, 4)) %>%
hchart(hcaes(x = country, y = value, group = metric), type = 'bar')
country_features %>%
ungroup %>%
select(c('country', feature_vars)) %>%
gather(metric, value, -country) %>%
filter(metric == selected_map_metric) %>%
arrange(-value) %>%
mutate(value = round(value, 4)) %>%
hchart(hcaes(x = country, y = value, group = metric), type = 'bar') %>%
hc_xAxis(title = list(text = ''))
country_features %>%
ungroup %>%
select(c('country', feature_vars)) %>%
gather(metric, value, -country) %>%
filter(metric == selected_map_metric) %>%
arrange(-value) %>%
mutate(value = round(value, 4)) %>%
hchart(hcaes(x = country, y = value, group = metric), type = 'bar') %>%
hc_xAxis(title = list(text = '')) %>%
hc_xAxis(title = list(text = selected_map_metric))
country_features %>%
ungroup %>%
select(c('country', feature_vars)) %>%
gather(metric, value, -country) %>%
filter(metric == selected_map_metric) %>%
arrange(-value) %>%
mutate(value = round(value, 4)) %>%
hchart(hcaes(x = country, y = value, group = metric), type = 'bar') %>%
hc_xAxis(title = list(text = '')) %>%
hc_yAxis(title = list(text = selected_map_metric))
country_features %>%
ungroup %>%
select(c('country', feature_vars)) %>%
gather(metric, value, -country) %>%
filter(metric == selected_map_metric) %>%
arrange(-value) %>%
mutate(value = round(value, 4)) %>%
hchart(hcaes(x = country, y = value, group = metric), type = 'bar') %>%
hc_xAxis(title = list(text = '')) %>%
hc_yAxis(title = list(text = selected_map_metric)) %>%
hc_add_theme(hc_theme_smpl())
library(glue)
country_features %>%
ungroup %>%
select(c('country', feature_vars)) %>%
gather(metric, value, -country) %>%
filter(metric == selected_map_metric) %>%
arrange(-value) %>%
mutate(value = round(value, 4)) %>%
hchart(hcaes(x = country, y = value, group = metric), type = 'bar') %>%
hc_xAxis(title = list(text = '')) %>%
hc_yAxis(title = list(text = selected_map_metric)) %>%
hc_title(text = glue('Distinctive music by country, sorted by {selected_map_metric}'))
country_features %>%
ungroup %>%
select(c('country', feature_vars)) %>%
gather(metric, value, -country) %>%
filter(metric == selected_map_metric) %>%
arrange(-value) %>%
mutate(value = round(value, 4)) %>%
hchart(hcaes(x = country, y = value, group = metric), type = 'bar') %>%
hc_xAxis(title = list(text = '')) %>%
hc_yAxis(title = list(text = selected_map_metric)) %>%
hc_title(text = glue('Distinctive music by country, ranked by {selected_map_metric}'))
country_features %>%
ungroup %>%
select(c('country', feature_vars)) %>%
gather(metric, value, -country) %>%
filter(metric == selected_map_metric) %>%
arrange(-value) %>%
mutate(value = round(value, 4)) %>%
hchart(hcaes(x = country, y = value, group = metric), type = 'bar') %>%
hc_xAxis(title = list(text = '')) %>%
hc_yAxis(title = list(text = selected_map_metric)) %>%
hc_title(text = glue('Distinctive music around the world, ranked by {selected_map_metric}'))
country_features %>%
ungroup %>%
select(c('country', feature_vars)) %>%
gather(metric, value, -country) %>%
filter(metric == selected_map_metric) %>%
arrange(-value) %>%
mutate(value = round(value, 4)) %>%
hchart(hcaes(x = country, y = value, group = metric), type = 'bar') %>%
hc_xAxis(title = list(text = '')) %>%
hc_yAxis(title = list(text = selected_map_metric)) %>%
hc_title(text = glue("Countries' most distinctive music, ranked by {selected_map_metric}"))
country_features %>%
ungroup %>%
select(c('country', feature_vars)) %>%
gather(metric, value, -country) %>%
filter(metric == selected_map_metric) %>%
arrange(-value) %>%
mutate(value = round(value, 4)) %>%
hchart(hcaes(x = country, y = value, group = metric), type = 'bar') %>%
hc_xAxis(title = list(text = '')) %>%
hc_yAxis(title = list(text = selected_map_metric)) %>%
hc_title(text = glue("Countries' most distinctive music, ranked by average {selected_map_metric} per song"))
country_features %>%
ungroup %>%
select(c('country', feature_vars)) %>%
gather(metric, value, -country) %>%
filter(metric == selected_map_metric) %>%
arrange(-value) %>%
mutate(value = round(value, 4)) %>%
hchart(hcaes(x = country, y = value, group = metric), type = 'bar') %>%
hc_xAxis(title = list(text = '')) %>%
hc_yAxis(title = list(text = selected_map_metric)) %>%
hc_title(text = glue("Countries' most distinctive music, ranked by average {selected_map_metric} per song"))
ungroup %>%
select(c('country', feature_vars)) %>%
gather(metric, value, -country) %>%
filter(metric == selected_map_metric) %>%
arrange(-value) %>%
mutate(value = round(value, 4)) %>%
hchart(hcaes(x = country, y = value, group = metric), type = 'bar') %>%
hc_xAxis(title = list(text = '')) %>%
hc_yAxis(title = list(text = selected_map_metric)) %>%
hc_title(text = glue("Countries' most distinctive music, ranked by average song {selected_map_metric}"))
country_features %>%
ungroup %>%
select(c('country', feature_vars)) %>%
gather(metric, value, -country) %>%
filter(metric == selected_map_metric) %>%
arrange(-value) %>%
mutate(value = round(value, 4)) %>%
hchart(hcaes(x = country, y = value, group = metric), type = 'bar') %>%
hc_xAxis(title = list(text = '')) %>%
hc_yAxis(title = list(text = selected_map_metric)) %>%
hc_title(text = glue("Countries' most distinctive music, ranked by average song {selected_map_metric}"))
runApp()
runApp()
?leaflet
runApp()
