left_join(playlist_track_audio_features, by = 'track_uri') %>%
mutate_at(c('playlist_name', 'playlist_img', 'track_name', 'track_uri', 'artist_name', 'album_name', 'album_img'), funs(as.character)) %>%
mutate_at(c('danceability', 'energy', 'key', 'loudness', 'mode', 'speechiness', 'acousticness',
'instrumentalness', 'liveness', 'valence', 'tempo', 'duration_ms', 'time_signature'), funs(as.numeric(gsub('[^0-9.-]+', '', as.character(.)))))
### genius
token <- '0WblX68Oq3W8IqgBwBDL8MqY0cSPy5hOsD7L3aLQLd6rXxQYdh0Fs_ZbhtgeGn9O'
genius_get_songs <- function(song, artist, n_results = 10) {
q <- paste(song, artist, sep = ' - ')
baseURL <- 'https://api.genius.com/search?q='
requestURL <- paste0(baseURL, gsub(' ', '%20', q),
'&per_page=', n_results,
'&access_token=', token)
res <- GET(requestURL) %>% content %>% .$response %>% .$hits
map_df(1:length(res), function(x) {
tmp <- res[[x]]
if (tmp$type != 'song') {
song_id <- NA
song_name <- NA
artist_name <- NA
} else {
song_id <- tmp$result$id
song_name <- str_replace(tmp$result$full_title, ' by.*', '')
artist_name <- str_trim(str_replace(tmp$result$full_title, '.* by', ''))
}
list(
song_id = song_id,
og_song = song,
song_name = song_name,
og_artist = artist,
artist_name = artist_name
)
}) %>% slice(1)
}
df <- tots %>% filter(playlist_name == 'HappySad')
df$track_name[df$track_name == 'CAN\'T STOP THE FEELING! (Original Song from DreamWorks Animation\'s \"TROLLS\")'] <- "Can't Stop the Feeling"
df$track_name[df$track_name == "Don't Stop Me Now - Remastered 2011"] <- "Don't Stop Me Now"
df$artist_name[df$track_name == "Home Is Where The Heart Is"] <- "Peter, Paul, and Mary"
genius_tracks <- map_df(1:nrow(df), function(x) {
genius_get_songs(df$track_name[x], df$artist_name[x])
})
genius_get_lyrics <- function(track_ids) {
base_url <- 'https://api.genius.com/songs/'
raw_lyrics <- map_df(track_ids, function(x) {
res <- GET(paste0(base_url, x), query = list(access_token = token)) %>% content
url <- res$response$song$url
lyrics <- read_html(url) %>%
html_node('lyrics') %>%
html_text
list(
genius_track_id = x,
lyrics = lyrics
)
}) %>% mutate(lyrics = str_replace_all(lyrics, '\\[(Verse [[:digit:]]|Pre-Chorus [[:digit:]]|Hook [[:digit:]]|Chorus|Outro|Verse|Refrain|Hook|Bridge|Intro|Instrumental)\\]|[[:digit:]]|[\\.!?\\(\\)\\[\\],]', ''),
lyrics = str_replace_all(lyrics, '\\n', ' '),
lyrics = str_replace_all(lyrics, '([A-Z])', ' \\1'),
lyrics = str_replace_all(lyrics, ' {2,}', ' '),
lyrics = tolower(str_trim(lyrics)))
}
genius_lyrics <- genius_get_lyrics(genius_tracks$song_id)
genius_df <- genius_tracks %>%
left_join(genius_lyrics, by = c('song_id' = 'genius_track_id')) %>%
rename(genius_track_id = song_id)
sad_words <- sentiments %>%
filter(lexicon == 'nrc', sentiment == 'sad') %>%
select(word, sentiment)
library(tidytext)
sad_words <- sentiments %>%
filter(lexicon == 'nrc', sentiment == 'sad') %>%
select(word, sentiment)
sent_df <- track_df %>%
unnest_tokens(word, lyrics) %>%
anti_join(stop_words, by = 'word') %>%
left_join(sad_words, by = 'word') %>%
group_by(track_name) %>%
summarise(pct_sad = round(sum(sentiment == 'sad', na.rm = T) / n(), 4),
word_count = n()) %>%
ungroup
track_df <- df %>%
left_join(genius_df, by = c('track_name' = 'og_song', 'artist_name' = 'og_artist'))
## Calculate lyrical sadness
library(tidytext)
sad_words <- sentiments %>%
filter(lexicon == 'nrc', sentiment == 'sad') %>%
select(word, sentiment)
sent_df <- track_df %>%
unnest_tokens(word, lyrics) %>%
anti_join(stop_words, by = 'word') %>%
left_join(sad_words, by = 'word') %>%
group_by(track_name) %>%
summarise(pct_sad = round(sum(sentiment == 'sad', na.rm = T) / n(), 4),
word_count = n()) %>%
ungroup
sent_df %>%
select(pct_sad, track_name) %>%
arrange(-pct_sad) %>%
head(10)
sad_words <- sentiments %>%
filter(lexicon == 'nrc', sentiment == 'sad') %>%
select(word) %>%
mutate(sad = T)
sent_df <- track_df %>%
unnest_tokens(word, lyrics) %>%
anti_join(stop_words, by = 'word') %>%
left_join(sad_words, by = 'word') %>%
group_by(track_name) %>%
summarise(pct_sad = round(sum(sad, na.rm = T) / n(), 4),
word_count = n()) %>%
ungroup
sent_df %>%
select(pct_sad, track_name) %>%
arrange(-pct_sad) %>%
head(10)
sad_words
sad_words <- sentiments %>%
filter(lexicon == 'nrc', sentiment == 'sadness') %>%
select(word) %>%
mutate(sad = T)
sent_df <- track_df %>%
unnest_tokens(word, lyrics) %>%
anti_join(stop_words, by = 'word') %>%
left_join(sad_words, by = 'word') %>%
group_by(track_name) %>%
summarise(pct_sad = round(sum(sad, na.rm = T) / n(), 4),
word_count = n()) %>%
ungroup
sent_df %>%
select(pct_sad, track_name) %>%
arrange(-pct_sad) %>%
head(10)
library(scales)
track_df <- track_df %>%
left_join(sent_df, by = 'track_name') %>%
mutate_at(c('sentiment_score', 'word_count'), funs(ifelse(is.na(.), 0, .))) %>%
mutate(lyrical_density = word_count / duration_ms * 1000,
gloom_index = round(rescale(((valence) + (sentiment_score * (1 + lyrical_density))) / 2, to = c(1, 100)), 2))
# Find top 10 gloomiest songs
track_df %>%
select(gloom_index, track_name) %>%
arrange(gloom_index) %>%
head(10)
map(c('valence', 'energy', 'gloom_index'), function(x) {
track_df %>%
filter(playlist_name == 'HappySad') %>%
rowwise %>%
mutate_("tooltip" = paste0("paste0('<a style = \"margin-right:', max(nchar(track_name), nchar(playlist_name)) * 9, 'px\">',
'<img src=', album_img, ' height=\"50\" style=\"float:left;margin-right:5px\">',
'<b>Artist:</b> ', artist_name,
'<br><b>Track:</b> ', track_name,
'<br><b>", x, ":</b> ',", x,")")) %>%
ungroup %>%
arrange_(paste0('-', x)) %>%
mutate(track_name = ifelse(nchar(track_name) > 20, paste0(substr(track_name, 1, 16), ' ...'), track_name)) %>%
rename_(metric = x) %>%
hchart(hcaes(x = track_name, y = metric), type = 'bar') %>%
hc_tooltip(formatter = JS(paste0("function() {return this.point.tooltip;}")), useHTML = T) %>%
hc_yAxis(title = list(text = x)) %>%
hc_xAxis(title = list(text = '')) %>%
hc_add_theme(hc_theme_economist())
}) %>% hw_grid %>% browsable
track_df %>%
filter(playlist_name == 'HappySad') %>%
rowwise %>%
mutate(tooltip = paste0('<a style = \"margin-right:', max(max(nchar(track_name), nchar(playlist_name)) * 9, 110), 'px\">',
'<img src=', album_img, ' height=\"50\" style=\"float:left;margin-right:5px\">',
'<b>Artist:</b> ', artist_name,
'<br><b>Track:</b> ', track_name,
'<br><b>Valence:</b> ', valence,
'<br><b>Gloom Index:</b> ', gloom_index)) %>%
ungroup %>%
hchart(hcaes(x = valence, y = gloom_index, group = playlist_name), type = 'scatter') %>%
hc_tooltip(formatter = JS(paste0("function() {return this.point.tooltip;}")), useHTML = T) %>%
hc_yAxis(max = 100, title = list(text = 'Sentiment Score')) %>%
hc_xAxis(max = 1, title = list(text = 'Valence')) %>%
hc_add_theme(hc_theme_smpl()) %>%
hc_add_series(name = 'Random', data = c(0,100), type = 'line', dashStyle = dash_styles()[2], color = 'grey')
track_df <- track_df %>%
left_join(sent_df, by = 'track_name') %>%
mutate_at(c('sentiment_score', 'word_count'), funs(ifelse(is.na(.), 0, .))) %>%
mutate(lyrical_density = word_count / duration_ms * 1000,
gloom_index = round(rescale(1 - ((1 - valence) + (pct_sad * (1 + lyrical_density))) / 2, to = c(1, 100)), 2))
# Find top 10 gloomiest songs
track_df %>%
select(gloom_index, track_name) %>%
arrange(gloom_index) %>%
head(10)
track_df <- df %>%
left_join(genius_df, by = c('track_name' = 'og_song', 'artist_name' = 'og_artist'))
## Calculate lyrical sadness
library(tidytext)
sad_words <- sentiments %>%
filter(lexicon == 'nrc', sentiment == 'sadness') %>%
select(word) %>%
mutate(sad = T)
sent_df <- track_df %>%
unnest_tokens(word, lyrics) %>%
anti_join(stop_words, by = 'word') %>%
left_join(sad_words, by = 'word') %>%
group_by(track_name) %>%
summarise(pct_sad = round(sum(sad, na.rm = T) / n(), 4),
word_count = n()) %>%
ungroup
sent_df %>%
select(pct_sad, track_name) %>%
arrange(-pct_sad) %>%
head(10)
library(scales)
track_df <- track_df %>%
left_join(sent_df, by = 'track_name') %>%
mutate_at(c('sentiment_score', 'word_count'), funs(ifelse(is.na(.), 0, .))) %>%
mutate(lyrical_density = word_count / duration_ms * 1000,
gloom_index = round(rescale(1 - ((1 - valence) + (pct_sad * (1 + lyrical_density))) / 2, to = c(1, 100)), 2))
# Find top 10 gloomiest songs
track_df %>%
select(gloom_index, track_name) %>%
arrange(gloom_index) %>%
head(10)
track_df <- track_df %>%
left_join(sent_df, by = 'track_name') %>%
mutate_at(c('pct_sad', 'word_count'), funs(ifelse(is.na(.), 0, .))) %>%
mutate(lyrical_density = word_count / duration_ms * 1000,
gloom_index = round(rescale(1 - ((1 - valence) + (pct_sad * (1 + lyrical_density))) / 2, to = c(1, 100)), 2))
# Find top 10 gloomiest songs
track_df %>%
select(gloom_index, track_name) %>%
arrange(gloom_index) %>%
head(10)
map(c('valence', 'energy', 'pct_sad'), function(x) {
track_df %>%
filter(playlist_name == 'HappySad') %>%
rowwise %>%
mutate_("tooltip" = paste0("paste0('<a style = \"margin-right:', max(nchar(track_name), nchar(playlist_name)) * 9, 'px\">',
'<img src=', album_img, ' height=\"50\" style=\"float:left;margin-right:5px\">',
'<b>Artist:</b> ', artist_name,
'<br><b>Track:</b> ', track_name,
'<br><b>", x, ":</b> ',", x,")")) %>%
ungroup %>%
arrange_(paste0('-', x)) %>%
mutate(track_name = ifelse(nchar(track_name) > 20, paste0(substr(track_name, 1, 16), ' ...'), track_name)) %>%
rename_(metric = x) %>%
hchart(hcaes(x = track_name, y = metric), type = 'bar') %>%
hc_tooltip(formatter = JS(paste0("function() {return this.point.tooltip;}")), useHTML = T) %>%
hc_yAxis(title = list(text = x)) %>%
hc_xAxis(title = list(text = '')) %>%
hc_add_theme(hc_theme_economist())
}) %>% hw_grid %>% browsable
library(highcharter)
map(c('valence', 'energy', 'pct_sad'), function(x) {
track_df %>%
filter(playlist_name == 'HappySad') %>%
rowwise %>%
mutate_("tooltip" = paste0("paste0('<a style = \"margin-right:', max(nchar(track_name), nchar(playlist_name)) * 9, 'px\">',
'<img src=', album_img, ' height=\"50\" style=\"float:left;margin-right:5px\">',
'<b>Artist:</b> ', artist_name,
'<br><b>Track:</b> ', track_name,
'<br><b>", x, ":</b> ',", x,")")) %>%
ungroup %>%
arrange_(paste0('-', x)) %>%
mutate(track_name = ifelse(nchar(track_name) > 20, paste0(substr(track_name, 1, 16), ' ...'), track_name)) %>%
rename_(metric = x) %>%
hchart(hcaes(x = track_name, y = metric), type = 'bar') %>%
hc_tooltip(formatter = JS(paste0("function() {return this.point.tooltip;}")), useHTML = T) %>%
hc_yAxis(title = list(text = x)) %>%
hc_xAxis(title = list(text = '')) %>%
hc_add_theme(hc_theme_economist())
}) %>% hw_grid %>% browsable
map(c('valence', 'energy', 'pct_sad'), function(x) {
track_df %>%
filter(playlist_name == 'HappySad') %>%
rowwise %>%
mutate_("tooltip" = paste0("paste0('<a style = \"margin-right:', max(max(nchar(track_name), nchar(playlist_name)) * 9, 110), 'px\">',
'<img src=', album_img, ' height=\"50\" style=\"float:left;margin-right:5px\">',
'<b>Artist:</b> ', artist_name,
'<br><b>Track:</b> ', track_name,
'<br><b>", x, ":</b> ',", x,")")) %>%
ungroup %>%
arrange_(paste0('-', x)) %>%
mutate(track_name = ifelse(nchar(track_name) > 20, paste0(substr(track_name, 1, 16), ' ...'), track_name)) %>%
rename_(metric = x) %>%
hchart(hcaes(x = track_name, y = metric), type = 'bar') %>%
hc_tooltip(formatter = JS(paste0("function() {return this.point.tooltip;}")), useHTML = T) %>%
hc_yAxis(title = list(text = x)) %>%
hc_xAxis(title = list(text = '')) %>%
hc_add_theme(hc_theme_economist())
}) %>% hw_grid %>% browsable
track_df %>%
filter(playlist_name == 'HappySad') %>%
rowwise %>%
mutate(tooltip = paste0('<a style = \"margin-right:', max(max(nchar(track_name), nchar(playlist_name)) * 9, 110), 'px\">',
'<img src=', album_img, ' height=\"50\" style=\"float:left;margin-right:5px\">',
'<b>Artist:</b> ', artist_name,
'<br><b>Track:</b> ', track_name,
'<br><b>Valence:</b> ', valence,
'<br><b>Energy:</b> ', energy)) %>%
ungroup %>%
hchart(hcaes(x = valence, y = energy, group = playlist_name), type = 'scatter') %>%
hc_tooltip(formatter = JS(paste0("function() {return this.point.tooltip;}")), useHTML = T) %>%
hc_yAxis(max = 1, title = list(text = 'Energy')) %>%
hc_xAxis(max = 1, title = list(text = 'Valence')) %>%
hc_add_theme(hc_theme_smpl()) %>%
hc_add_series(name = 'Random', data = c(0,100), type = 'line', dashStyle = dash_styles()[2], color = 'grey')
track_df %>%
filter(playlist_name == 'HappySad') %>%
rowwise %>%
mutate(tooltip = paste0('<a style = \"margin-right:', max(max(nchar(track_name), nchar(playlist_name)) * 9, 110), 'px\">',
'<img src=', album_img, ' height=\"50\" style=\"float:left;margin-right:5px\">',
'<b>Artist:</b> ', artist_name,
'<br><b>Track:</b> ', track_name,
'<br><b>Valence:</b> ', valence,
'<br><b>Energy:</b> ', energy)) %>%
ungroup %>%
hchart(hcaes(x = valence, y = energy, group = playlist_name), type = 'scatter') %>%
hc_tooltip(formatter = JS(paste0("function() {return this.point.tooltip;}")), useHTML = T) %>%
hc_yAxis(max = 1, title = list(text = 'Energy')) %>%
hc_xAxis(max = 1, title = list(text = 'Valence')) %>%
hc_add_theme(hc_theme_smpl()) %>%
hc_add_series(name = 'Random', data = c(0,1), type = 'line', dashStyle = dash_styles()[2], color = 'grey')
head(track_df)
track_df <- df %>%
left_join(genius_df, by = c('track_name' = 'og_song', 'artist_name' = 'og_artist'))
## Calculate lyrical sadness
library(tidytext)
sad_words <- sentiments %>%
filter(lexicon == 'nrc', sentiment == 'sadness') %>%
select(word) %>%
mutate(sad = T)
sent_df <- track_df %>%
unnest_tokens(word, lyrics) %>%
anti_join(stop_words, by = 'word') %>%
left_join(sad_words, by = 'word') %>%
group_by(track_name) %>%
summarise(pct_sad = round(sum(sad, na.rm = T) / n(), 4),
word_count = n()) %>%
ungroup
sent_df %>%
select(pct_sad, track_name) %>%
arrange(-pct_sad) %>%
head(10)
## Create gloom index
library(scales)
track_df <- track_df %>%
left_join(sent_df, by = 'track_name', 'artist_name') %>%
mutate_at(c('pct_sad', 'word_count'), funs(ifelse(is.na(.), 0, .))) %>%
mutate(lyrical_density = word_count / duration_ms * 1000,
gloom_index = round(rescale(1 - ((1 - valence) + (pct_sad * (1 + lyrical_density))) / 2, to = c(1, 100)), 2))
head(track_df)
track_df %>%
select(track_name, artist_name, album_name, energy, valence, pct_sad, gloom_index)
track_df %>%
select(track_name, artist_name, album_name, energy, valence, pct_sad, gloom_index) %>% View
track_df <- track_df %>%
left_join(sent_df, by = 'track_name', 'artist_name') %>%
mutate_at(c('pct_sad', 'word_count'), funs(ifelse(is.na(.), 0, .))) %>%
mutate(lyrical_density = word_count / duration_ms * 1000,
gloom_index = round(1 - ((1 - valence) + (pct_sad * (1 + lyrical_density))) / 2, 2))
track_df <- df %>%
left_join(genius_df, by = c('track_name' = 'og_song', 'artist_name' = 'og_artist'))
## Calculate lyrical sadness
library(tidytext)
sad_words <- sentiments %>%
filter(lexicon == 'nrc', sentiment == 'sadness') %>%
select(word) %>%
mutate(sad = T)
sent_df <- track_df %>%
unnest_tokens(word, lyrics) %>%
anti_join(stop_words, by = 'word') %>%
left_join(sad_words, by = 'word') %>%
group_by(track_name) %>%
summarise(pct_sad = round(sum(sad, na.rm = T) / n(), 4),
word_count = n()) %>%
ungroup
sent_df %>%
select(pct_sad, track_name) %>%
arrange(-pct_sad) %>%
head(10)
## Create gloom index
library(scales)
track_df <- track_df %>%
left_join(sent_df, by = 'track_name', 'artist_name') %>%
mutate_at(c('pct_sad', 'word_count'), funs(ifelse(is.na(.), 0, .))) %>%
mutate(lyrical_density = word_count / duration_ms * 1000,
gloom_index = round(1 - ((1 - valence) + (pct_sad * (1 + lyrical_density))) / 2, 2))
track_df %>%
select(track_name, artist_name, album_name, energy, valence, pct_sad, gloom_index) %>% View
cor(track_df$energy, track_df$valence)
cor(track_df$energy, track_df$pct_sad)
cor(track_df$valence, track_df$pct_sad)
cor(track_df$energy, track_df$gloom_index)
track_df %>%
select(track_name, artist_name, album_name, energy, valence, lyrical_sadness = pct_sad, gloom_index) %>% View
track_df %>%
select(track_name, artist_name, album_name, energy, valence, lyrical_sadness = pct_sad, gloom_index) %>%
hchart(hcaes(x = valence, y = energy), type = 'scatter')
track_df %>%
select(track_name, artist_name, album_name, energy, valence, lyrical_sadness = pct_sad, gloom_index) %>%
hchart(hcaes(x = valence, y = energy), type = 'scatter') %>%
hc_yAxis(plotLines = list(list(
value = .5,
color = '#ff0000',
width = 3,
zIndex = 4)))
track_df %>%
select(track_name, artist_name, album_name, energy, valence, lyrical_sadness = pct_sad, gloom_index) %>%
hchart(hcaes(x = valence, y = energy), type = 'scatter') %>%
hc_yAxis(plotLines = list(list(
value = .5,
color = 'grey',
width = 1)))
track_df %>%
select(track_name, artist_name, album_name, energy, valence, lyrical_sadness = pct_sad, gloom_index) %>%
hchart(hcaes(x = valence, y = energy), type = 'scatter') %>%
hc_yAxis(plotLines = list(list(
value = .5,
color = 'grey',
width = 1))) %>%
hc_add_theme(hc_theme_smpl())
track_df %>%
select(track_name, artist_name, album_name, energy, valence, lyrical_sadness = pct_sad, gloom_index) %>%
hchart(hcaes(x = valence, y = energy), type = 'scatter') %>%
hc_yAxis(plotLines = list(list(
value = .5,
color = 'black',
width = 2))) %>%
hc_add_theme(hc_theme_smpl())
track_df %>%
select(track_name, artist_name, album_name, energy, valence, lyrical_sadness = pct_sad, gloom_index) %>%
hchart(hcaes(x = valence, y = energy), type = 'scatter') %>%
hc_yAxis(plotLines = list(list(
value = .5,
color = 'black',
width = 2,
zIndex = 2))) %>%
hc_xAxis(plotLines = list(list(
value = .5,
color = 'black',
width = 2,
zIndex = 2))) %>%
hc_add_theme(hc_theme_smpl())
fin_df <- track_df %>%
select(track_name, artist_name, album_name, energy, valence, lyrical_sadness = pct_sad, lyrical_density, gloom_index)
fin_df
track_df %>% filter(track_name == 'Home Is Where the Heart Is') %>% select(lyrics)
track_df %>% filter(track_name == 'Home Is Where The Heart Is') %>% select(lyrics)
track_df %>%
filter(playlist_name == 'HappySad') %>%
rowwise %>%
mutate(tooltip = paste0('<a style = \"margin-right:', max(max(nchar(track_name), nchar(playlist_name)) * 9, 110), 'px\">',
'<img src=', album_img, ' height=\"50\" style=\"float:left;margin-right:5px\">',
'<b>Artist:</b> ', artist_name,
'<br><b>Track:</b> ', track_name,
'<br><b>Valence:</b> ', valence,
'<br><b>Energy:</b> ', energy)) %>%
ungroup %>%
hchart(hcaes(x = valence, y = energy, group = playlist_name), type = 'scatter') %>%
hc_tooltip(formatter = JS(paste0("function() {return this.point.tooltip;}")), useHTML = T) %>%
hc_yAxis(max = 1, title = list(text = 'Energy')) %>%
hc_xAxis(max = 1, title = list(text = 'Valence')) %>%
hc_add_theme(hc_theme_smpl()) %>%
hc_add_series(name = 'Random', data = c(0,1), type = 'line', dashStyle = dash_styles()[2], color = 'grey')
track_df %>%
filter(playlist_name == 'HappySad') %>%
rowwise %>%
mutate(tooltip = paste0('<a style = \"margin-right:', max(max(nchar(track_name), nchar(playlist_name)) * 9, 110), 'px\">',
'<img src=', album_img, ' height=\"50\" style=\"float:left;margin-right:5px\">',
'<b>Artist:</b> ', artist_name,
'<br><b>Track:</b> ', track_name,
'<br><b>Valence:</b> ', valence,
'<br><b>Energy:</b> ', energy)) %>%
ungroup %>%
hchart(hcaes(x = valence, y = energy, group = playlist_name), type = 'scatter') %>%
hc_tooltip(formatter = JS(paste0("function() {return this.point.tooltip;}")), useHTML = T) %>%
hc_yAxis(max = 1, title = list(text = 'Energy')) %>%
hc_xAxis(max = 1, title = list(text = 'Valence')) %>%
hc_add_theme(hc_theme_smpl()) %>%
# hc_add_series(name = 'Random', data = c(0,1), type = 'line', dashStyle = dash_styles()[2], color = 'grey')
hc_yAxis(plotLines = list(list(
value = .5,
color = 'black',
width = 2,
zIndex = 2))) %>%
hc_xAxis(plotLines = list(list(
value = .5,
color = 'black',
width = 2,
zIndex = 2)))
track_df %>%
filter(playlist_name == 'HappySad') %>%
rowwise %>%
mutate(tooltip = paste0('<a style = \"margin-right:', max(max(nchar(track_name), nchar(playlist_name)) * 9, 110), 'px\">',
'<img src=', album_img, ' height=\"50\" style=\"float:left;margin-right:5px\">',
'<b>Artist:</b> ', artist_name,
'<br><b>Track:</b> ', track_name,
'<br><b>Valence:</b> ', valence,
'<br><b>Energy:</b> ', energy)) %>%
ungroup %>%
hchart(hcaes(x = valence, y = energy, group = playlist_name), type = 'scatter') %>%
hc_tooltip(formatter = JS(paste0("function() {return this.point.tooltip;}")), useHTML = T) %>%
hc_yAxis(max = 1, title = list(text = 'Energy')) %>%
hc_xAxis(max = 1, title = list(text = 'Valence')) %>%
hc_add_theme(hc_theme_smpl()) %>%
# hc_add_series(name = 'Random', data = c(0,1), type = 'line', dashStyle = dash_styles()[2], color = 'grey')
hc_yAxis(plotLines = list(list(
value = .5,
color = 'black',
width = 2,
zIndex = 2))) %>%
hc_xAxis(plotLines = list(list(
value = .5,
color = 'black',
width = 2,
zIndex = 2)))
shiny::runApp('Side Projects/midnight barber/shiny-server/playlists')
runApp('Side Projects/midnight barber/shiny-server/playlists')
